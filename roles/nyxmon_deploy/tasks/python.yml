---
# Setup Python environment for Nyxmon

- name: Ensure Python and pip are installed
  package:
    name:
      - python3
      - python3-pip
      - python3-venv
    state: present

- name: Check if uv is installed
  command: which uv
  register: uv_check
  failed_when: false
  changed_when: false
  when: nyxmon_use_uv

- name: Fail if uv is not installed
  fail:
    msg: "uv is required but not installed. Please install it globally first."
  when:
    - nyxmon_use_uv
    - uv_check.rc != 0

- name: Determine Django project path
  set_fact:
    nyxmon_django_path: "{{ nyxmon_site_path }}"

- name: Ensure pyproject.toml exists when using source copy
  stat:
    path: "{{ nyxmon_site_path }}/pyproject.toml"
  register: nyxmon_pyproject
  when:
    - nyxmon_use_uv
    - nyxmon_use_source_pyproject

- name: Fail if pyproject.toml is missing
  fail:
    msg: "pyproject.toml was not found at {{ nyxmon_site_path }}. Set nyxmon_use_source_pyproject=false or ensure the file is synced."
  when:
    - nyxmon_use_uv
    - nyxmon_use_source_pyproject
    - not nyxmon_pyproject.stat.exists

- name: Ensure pyproject.toml ownership and mode
  file:
    path: "{{ nyxmon_site_path }}/pyproject.toml"
    owner: "{{ nyxmon_user }}"
    group: "{{ nyxmon_group }}"
    mode: '0644'
  when:
    - nyxmon_use_uv
    - nyxmon_use_source_pyproject

- name: Create pyproject.toml for site from template
  template:
    src: pyproject.toml.j2
    dest: "{{ nyxmon_site_path }}/pyproject.toml"
    owner: "{{ nyxmon_user }}"
    group: "{{ nyxmon_group }}"
    mode: '0644'
  when:
    - nyxmon_use_uv
    - not nyxmon_use_source_pyproject

- name: Remove stale uv.lock before syncing
  file:
    path: "{{ nyxmon_site_path }}/uv.lock"
    state: absent
  when: nyxmon_use_uv

- name: Build uv sync command arguments
  set_fact:
    nyxmon_uv_sync_cmd: >-
      uv sync --no-default-groups --no-dev{{ '' if nyxmon_use_source_pyproject else ' --upgrade-package nyxmon' }}
  when: nyxmon_use_uv

- name: Create virtual environment using uv
  command: uv venv {{ nyxmon_venv_path }}
  args:
    creates: "{{ nyxmon_venv_path }}/bin/python"
  become_user: "{{ nyxmon_user }}"
  when: nyxmon_use_uv

- name: Check if venv symlink exists
  stat:
    path: "{{ nyxmon_site_path }}/venv"
  register: venv_link
  when: nyxmon_use_uv

- name: Create venv symlink to .venv
  file:
    src: "{{ nyxmon_venv_path }}"
    dest: "{{ nyxmon_site_path }}/venv"
    state: link
    owner: "{{ nyxmon_user }}"
    group: "{{ nyxmon_group }}"
    force: true  # Replace if exists with wrong owner
  when: nyxmon_use_uv

- name: Create virtual environment using venv
  command: python3 -m venv {{ nyxmon_venv_path }}
  args:
    creates: "{{ nyxmon_venv_path }}/bin/python"
  become_user: "{{ nyxmon_user }}"
  when: not nyxmon_use_uv

- name: Install dependencies using uv
  command: "{{ nyxmon_uv_sync_cmd }}"
  args:
    chdir: "{{ nyxmon_django_path }}"
  environment:
    VIRTUAL_ENV: "{{ nyxmon_venv_path }}"
  become_user: "{{ nyxmon_user }}"
  when: nyxmon_use_uv
  register: uv_sync

- name: Install dependencies using pip
  pip:
    requirements: "{{ nyxmon_django_path }}/requirements.txt"
    virtualenv: "{{ nyxmon_venv_path }}"
    state: present
  become_user: "{{ nyxmon_user }}"
  when: not nyxmon_use_uv
