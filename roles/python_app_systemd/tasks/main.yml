---
- name: Create service user
  user:
    name: "{{ service_user }}"
    home: "{{ service_home }}"
    shell: /bin/bash
    system: yes
    create_home: yes
  become: yes

- name: Create required directories
  file:
    path: "{{ dir_item }}"
    state: directory
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: "0755"
  loop:
    - "{{ service_home }}"
    - "{{ service_work_dir }}"
    - "{{ venv_path }}"
  loop_control:
    loop_var: dir_item
  become: yes

- name: Create Django cache directory if needed
  file:
    path: "{{ django_cache_dir }}"
    state: directory
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: "0755"
  when: django_enabled and django_cache_dir is defined
  become: yes

- name: Include rsync tasks
  include_tasks: rsync.yml
  when: service.strategy == 'rsync'

- name: Fix ownership after rsync
  file:
    path: "{{ service.rsync.dest }}"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    recurse: yes
  when: service.strategy == 'rsync' and sync_out.changed
  become: yes

- name: Create Python virtual environment
  shell: |
    if [ ! -d "{{ venv_path }}" ]; then
      {{ uv_path }} venv "{{ venv_path }}" --python {{ python_version }}
    fi
  args:
    chdir: "{{ service_work_dir }}"
  become: yes
  become_user: "{{ service_user }}"
  register: venv_result
  changed_when: "'Creating virtualenv' in venv_result.stdout"

- name: Create venv symlink if needed
  file:
    src: "{{ venv_path | basename }}"
    dest: "{{ service_work_dir }}/venv"
    state: link
  when: venv_path | basename != 'venv'
  become: yes
  become_user: "{{ service_user }}"

- name: Copy pyproject.toml if provided
  template:
    src: "{{ service.app.pyproject_template | default('pyproject.toml.j2') }}"
    dest: "{{ service_work_dir }}/pyproject.toml"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: "0644"
  when: service.app.pyproject_template is defined or (lookup('file', 'templates/pyproject.toml.j2', errors='ignore'))
  become: yes
  ignore_errors: yes

- name: Create environment file
  template:
    src: env.j2
    dest: "{{ service_home }}/.env"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: "0600"
  become: yes
  when: service.env is defined or service.secrets is defined
  notify: "restart {{ service.name }}"

- name: Install Python dependencies
  shell: |
    {{ service.app.install }}
  args:
    chdir: "{{ service_work_dir }}"
  environment:
    PATH: "{{ uv_path | dirname }}:{{ ansible_env.PATH }}"
  become: yes
  become_user: "{{ service_user }}"
  register: install_result
  changed_when: >
    'Installing' in install_result.stdout or 
    'Updated' in install_result.stdout or
    'Audited' in install_result.stdout or
    sync_out.changed | default(false)
  notify: "restart {{ service.name }}"

- name: Run Django migrations
  shell: |
    set -a
    [ -f "{{ service_home }}/.env" ] && . "{{ service_home }}/.env"
    set +a
    {{ venv_path }}/bin/python manage.py migrate --noinput
  args:
    chdir: "{{ service_work_dir }}"
  environment:
    DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"
  become: yes
  become_user: "{{ service_user }}"
  when: django_enabled and django_migrate
  register: migrate_result
  changed_when: "'Applying' in migrate_result.stdout"
  notify: "restart {{ service.name }}"

- name: Ensure Django database is writable
  file:
    path: "{{ service_work_dir }}/db.sqlite3"
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: "0664"
  when: django_enabled
  become: yes
  ignore_errors: yes

- name: Collect Django static files  
  shell: |
    set -a
    [ -f "{{ service_home }}/.env" ] && . "{{ service_home }}/.env"
    set +a
    {{ venv_path }}/bin/python manage.py collectstatic --noinput
  args:
    chdir: "{{ service_work_dir }}"
  environment:
    DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"
  become: yes
  become_user: "{{ service_user }}"
  when: django_enabled and django_collectstatic
  register: collectstatic_result
  changed_when: "'0 static files copied' not in collectstatic_result.stdout"

- name: Create systemd service unit
  template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/{{ service.name }}.service"
    owner: root
    group: root
    mode: "0644"
  become: yes
  notify:
    - reload systemd
    - "restart {{ service.name }}"

- name: Create monitoring agent service unit
  template:
    src: monitor.service.j2
    dest: "/etc/systemd/system/{{ monitoring_service_name }}.service"
    owner: root
    group: root
    mode: "0644"
  become: yes
  when: monitoring_enabled
  notify:
    - reload systemd
    - "restart {{ monitoring_service_name }}"

- name: Create Traefik configuration
  template:
    src: traefik.yml.j2
    dest: "{{ traefik_config_dir }}/{{ service.name }}.yml"
    owner: root
    group: root
    mode: "0644"
  become: yes
  when: traefik_enabled
  notify: reload traefik

- name: Enable and start service
  systemd:
    name: "{{ service.name }}"
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

- name: Enable and start monitoring agent
  systemd:
    name: "{{ monitoring_service_name }}"
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes
  when: monitoring_enabled