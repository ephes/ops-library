---
# Alternative rsync implementation using git to get ignored files

- name: Get git-ignored files (when respect_gitignore is true)
  shell: |
    cd "{{ service.rsync.src }}" && git ls-files --ignored --exclude-standard --others -z | tr '\0' '\n'
  delegate_to: localhost
  become: no
  register: git_ignored
  changed_when: false
  failed_when: false
  when: 
    - service.strategy == 'rsync'
    - service.rsync.respect_gitignore | default(false)

- name: Create temporary exclude file
  tempfile:
    state: file
    suffix: .rsync_exclude
  delegate_to: localhost
  become: no
  register: exclude_file
  when: 
    - service.strategy == 'rsync'
    - service.rsync.respect_gitignore | default(false)
    - git_ignored.stdout | default('') | length > 0

- name: Write git-ignored files to exclude file
  copy:
    content: |
      # Git ignored files
      {{ git_ignored.stdout | default('') }}
      # Manual excludes
      {% for exclude in service.rsync.excludes | default([]) %}
      {{ exclude }}
      {% endfor %}
    dest: "{{ exclude_file.path }}"
  delegate_to: localhost
  become: no
  when: 
    - exclude_file.path is defined
    - service.strategy == 'rsync'
    - service.rsync.respect_gitignore | default(false)

- name: Rsync with git-based excludes
  ansible.posix.synchronize:
    src: "{{ service.rsync.src }}"
    dest: "{{ service.rsync.dest }}/"
    archive: true
    delete: "{{ service.rsync.delete | default(true) }}"
    rsync_opts:
      - "--exclude-from={{ exclude_file.path }}"
    rsync_path: "sudo -u {{ service_user }} rsync"
  when: 
    - service.strategy == 'rsync'
    - service.rsync.respect_gitignore | default(false)
    - exclude_file.path is defined
  register: sync_out_git
  changed_when: sync_out_git.changed
  notify: "restart {{ service.name }}"
  become: yes

- name: Rsync without gitignore (fallback)
  ansible.posix.synchronize:
    src: "{{ service.rsync.src }}"
    dest: "{{ service.rsync.dest }}/"
    archive: true
    delete: "{{ service.rsync.delete | default(true) }}"
    rsync_opts: "{{ rsync_options }}"
    rsync_path: "sudo -u {{ service_user }} rsync"
  vars:
    rsync_options: >-
      {{ (service.rsync.excludes | default([])) | map('regex_replace', '^(.*)$', '--exclude=\1') | list }}
  when: 
    - service.strategy == 'rsync'
    - not (service.rsync.respect_gitignore | default(false)) or exclude_file.path is not defined
  register: sync_out_normal
  changed_when: sync_out_normal.changed
  notify: "restart {{ service.name }}"
  become: yes

- name: Clean up temporary exclude file
  file:
    path: "{{ exclude_file.path }}"
    state: absent
  delegate_to: localhost
  become: no
  when: exclude_file.path is defined

# Set a unified sync_out variable for downstream tasks
- name: Set sync_out fact
  set_fact:
    sync_out: "{{ sync_out_git if sync_out_git is defined and sync_out_git.changed is defined else sync_out_normal }}"
  when: service.strategy == 'rsync'