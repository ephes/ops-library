---
# Test playbook for traefik_deploy role
# Run with: ansible-playbook tests/test_traefik_deploy.yml -i tests/inventory/test.yml

- name: Test Traefik Deploy Role Components
  hosts: localhost
  connection: local
  gather_facts: yes

  tasks:
    - name: Test 1 - Verify role structure
      block:
        - name: Check defaults exist
          stat:
            path: "{{ playbook_dir }}/../roles/traefik_deploy/defaults/main.yml"
          register: defaults_file

        - name: Check tasks exist
          stat:
            path: "{{ playbook_dir }}/../roles/traefik_deploy/tasks/main.yml"
          register: tasks_file

        - name: Check templates exist
          stat:
            path: "{{ playbook_dir }}/../roles/traefik_deploy/templates/traefik.toml.j2"
          register: template_file

        - name: Check handlers exist
          stat:
            path: "{{ playbook_dir }}/../roles/traefik_deploy/handlers/main.yml"
          register: handlers_file

        - name: Assert all files exist
          assert:
            that:
              - defaults_file.stat.exists
              - tasks_file.stat.exists
              - template_file.stat.exists
              - handlers_file.stat.exists
            fail_msg: "Required role files are missing"
            success_msg: "All required role files exist"

    - name: Test 2 - Validate defaults
      block:
        - name: Load defaults
          include_vars:
            file: "{{ playbook_dir }}/../roles/traefik_deploy/defaults/main.yml"

        - name: Assert required defaults are defined
          assert:
            that:
              - traefik_version is defined
              - traefik_letsencrypt_email is defined
              - traefik_os is defined
              - traefik_arch is defined
              - traefik_config_dir is defined
            fail_msg: "Required defaults are missing"
            success_msg: "All required defaults are defined"

        - name: Assert default values are safe
          assert:
            that:
              - traefik_letsencrypt_email == "CHANGEME@example.com"
              - traefik_os == "linux"
              - traefik_arch == "amd64"
            fail_msg: "Defaults contain production values"
            success_msg: "Defaults are safe placeholders"

    - name: Test 3 - Validate architecture auto-detection logic
      block:
        - name: Test x86_64 mapping
          set_fact:
            test_arch: >-
              {%- if 'x86_64' == 'x86_64' -%}
                amd64
              {%- elif 'x86_64' == 'aarch64' -%}
                arm64
              {%- elif 'x86_64' in ['armv7l', 'armv6l'] -%}
                arm
              {%- else -%}
                x86_64
              {%- endif -%}

        - name: Assert x86_64 maps to amd64
          assert:
            that:
              - test_arch == "amd64"
            fail_msg: "x86_64 should map to amd64"
            success_msg: "Architecture mapping correct for x86_64"

        - name: Test aarch64 mapping
          set_fact:
            test_arch_arm: >-
              {%- if 'aarch64' == 'x86_64' -%}
                amd64
              {%- elif 'aarch64' == 'aarch64' -%}
                arm64
              {%- elif 'aarch64' in ['armv7l', 'armv6l'] -%}
                arm
              {%- else -%}
                aarch64
              {%- endif -%}

        - name: Assert aarch64 maps to arm64
          assert:
            that:
              - test_arch_arm == "arm64"
            fail_msg: "aarch64 should map to arm64"
            success_msg: "Architecture mapping correct for aarch64"

    - name: Test 4 - Validate template syntax
      block:
        - name: Set test variables for template
          set_fact:
            traefik_log_level: "INFO"
            traefik_log_format: "json"
            traefik_log_dir: "/var/log/traefik"
            traefik_dynamic_dir: "/etc/traefik/dynamic"
            traefik_http_port: 80
            traefik_https_port: 443
            traefik_dashboard_enabled: true
            traefik_dashboard_port: 8090
            traefik_http_redirect_to_https: true
            traefik_letsencrypt_email: "test@example.com"
            traefik_acme_storage: "/etc/traefik/acme/acme.json"
            traefik_metrics_enabled: true

        - name: Test template rendering
          template:
            src: "{{ playbook_dir }}/../roles/traefik_deploy/templates/traefik.toml.j2"
            dest: "/tmp/test_traefik.toml"

        - name: Verify template output exists
          stat:
            path: "/tmp/test_traefik.toml"
          register: template_output

        - name: Assert template rendered
          assert:
            that:
              - template_output.stat.exists
            fail_msg: "Template rendering failed"
            success_msg: "Template rendered successfully"

        - name: Validate TOML syntax (basic check)
          shell: |
            grep -q '\[global\]' /tmp/test_traefik.toml && \
            grep -q '\[entryPoints\]' /tmp/test_traefik.toml && \
            grep -q '\[certificatesResolvers.letsencrypt.acme\]' /tmp/test_traefik.toml
          register: toml_check

        - name: Clean up test file
          file:
            path: "/tmp/test_traefik.toml"
            state: absent

    - name: Test 5 - Validate systemd service template
      block:
        - name: Set test variables for service template
          set_fact:
            traefik_binary_path: "/usr/local/bin/traefik"
            traefik_static_config: "/etc/traefik/traefik.toml"
            traefik_config_dir: "/etc/traefik"

        - name: Test service template rendering
          template:
            src: "{{ playbook_dir }}/../roles/traefik_deploy/templates/traefik.service.j2"
            dest: "/tmp/test_traefik.service"

        - name: Verify service template output
          stat:
            path: "/tmp/test_traefik.service"
          register: service_output

        - name: Assert service template rendered
          assert:
            that:
              - service_output.stat.exists
            fail_msg: "Service template rendering failed"
            success_msg: "Service template rendered successfully"

        - name: Validate systemd unit syntax (basic check)
          shell: |
            grep -q '\[Unit\]' /tmp/test_traefik.service && \
            grep -q '\[Service\]' /tmp/test_traefik.service && \
            grep -q '\[Install\]' /tmp/test_traefik.service && \
            grep -q 'ExecStart=' /tmp/test_traefik.service
          register: unit_check

        - name: Clean up test file
          file:
            path: "/tmp/test_traefik.service"
            state: absent

    - name: Test 6 - Validate version parsing logic
      block:
        - name: Test version parsing without v prefix
          set_fact:
            test_output_no_v: "Version:      3.3.5\nCodename:     saintnectaire"

        - name: Parse version without v prefix
          set_fact:
            parsed_version_no_v: "{{ test_output_no_v | regex_search('Version:\\s+v?([0-9.]+)') | regex_replace('Version:\\s+v?', '') }}"

        - name: Assert version parsed correctly without v
          assert:
            that:
              - parsed_version_no_v == "3.3.5"
            fail_msg: "Version parsing failed for format without v prefix (got: {{ parsed_version_no_v }})"
            success_msg: "Version parsing works for format without v prefix"

        - name: Test version parsing with v prefix
          set_fact:
            test_output_with_v: "Version:      v3.3.5\nCodename:     saintnectaire"

        - name: Parse version with v prefix
          set_fact:
            parsed_version_with_v: "{{ test_output_with_v | regex_search('Version:\\s+v?([0-9.]+)') | regex_replace('Version:\\s+v?', '') }}"

        - name: Assert version parsed correctly with v
          assert:
            that:
              - parsed_version_with_v == "3.3.5"
            fail_msg: "Version parsing failed for format with v prefix (got: {{ parsed_version_with_v }})"
            success_msg: "Version parsing works for format with v prefix"

        - name: Test version comparison
          set_fact:
            version_target: "3.3.5"
            version_current_match: "3.3.5"
            version_current_diff: "3.2.0"

        - name: Assert version comparison works
          assert:
            that:
              - version_current_match == version_target
              - version_current_diff != version_target
            fail_msg: "Version comparison logic failed"
            success_msg: "Version comparison logic works correctly"

    - name: Test 7 - Validate README exists and is comprehensive
      block:
        - name: Check README exists
          stat:
            path: "{{ playbook_dir }}/../roles/traefik_deploy/README.md"
          register: readme_file

        - name: Assert README exists
          assert:
            that:
              - readme_file.stat.exists
            fail_msg: "README.md is missing"
            success_msg: "README.md exists"

        - name: Validate README content
          shell: |
            grep -q "## Description" {{ playbook_dir }}/../roles/traefik_deploy/README.md && \
            grep -q "## Requirements" {{ playbook_dir }}/../roles/traefik_deploy/README.md && \
            grep -q "## Role Variables" {{ playbook_dir }}/../roles/traefik_deploy/README.md && \
            grep -q "## Example Playbook" {{ playbook_dir }}/../roles/traefik_deploy/README.md
          register: readme_content

        - name: Assert README has required sections
          assert:
            that:
              - readme_content.rc == 0
            fail_msg: "README.md is missing required sections"
            success_msg: "README.md has all required sections"

- name: Summary
  hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Display test summary
      debug:
        msg: |
          âœ… All Traefik Deploy Role Tests Passed

          Validated:
          - Role structure (defaults, tasks, templates, handlers)
          - Default values are safe placeholders
          - Architecture auto-detection logic
          - Template rendering (traefik.toml.j2)
          - Systemd service template (traefik.service.j2)
          - Version parsing (with and without 'v' prefix)
          - Version comparison logic
          - README documentation completeness

          Note: This is a smoke test that validates structure and templates.
          For full integration testing (actual Traefik installation), use:
            cd ops-control && just deploy-one traefik
